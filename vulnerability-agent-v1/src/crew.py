"""
Vulnerability Crew Definition
Defines the AI agents and tasks for naval electronic warfare attack response
"""
import os
from pathlib import Path
from typing import List
from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task

# Import tools
from src.tools.multimodal_tools import (
    InputTypeDeterminerTool,
    EWSignalProcessor,
    ESMSensorSimulator,
    ELINTSensorSimulator,
    GNSSReceiverSimulator,
    CommunicationReceiverSimulator
)
from src.tools.network_anomaly_detector import NetworkAnomalyDetector
from src.tools.jamming_classifier import JammingClassifier
from src.tools.countermeasure_simulator import CountermeasureSimulator
from src.tools.actuator_tools import (
    ECMActuator,
    FrequencyHopActuator,
    PowerIncreaseActuator,
    UAVActuator,
    EvasiveManeuverActuator,
    EMCONActuator,
    AlternativeChannelActuator
)

# Import logging
from src.utils.logger import get_logger

logger = get_logger(__name__)


# Get absolute path to config directory
SCRIPT_DIR = Path(__file__).parent  # /path/to/src/
PROJECT_ROOT = SCRIPT_DIR.parent    # /path/to/project/
CONFIG_DIR = PROJECT_ROOT / 'config'

# DEBUG: Print resolved paths
print("=" * 70)
print("DEBUG: Path Resolution")
print("=" * 70)
print(f"__file__: {__file__}")
print(f"SCRIPT_DIR: {SCRIPT_DIR}")
print(f"PROJECT_ROOT: {PROJECT_ROOT}")
print(f"CONFIG_DIR: {CONFIG_DIR}")
print(f"agents.yaml exists: {(CONFIG_DIR / 'agents.yaml').exists()}")
print(f"tasks.yaml exists: {(CONFIG_DIR / 'tasks.yaml').exists()}")
print(f"agents.yaml path: {CONFIG_DIR / 'agents.yaml'}")
print(f"tasks.yaml path: {CONFIG_DIR / 'tasks.yaml'}")
print("=" * 70)

logger.debug(f"Config directory resolved to: {CONFIG_DIR}")
logger.debug(f"Agents config: {CONFIG_DIR / 'agents.yaml'}")
logger.debug(f"Tasks config: {CONFIG_DIR / 'tasks.yaml'}")


@CrewBase
class VulnerabilityCrew:
    """Naval Vulnerability Response Crew - Electronic Warfare Attack Response"""
    
    # Use absolute paths
    agents_config = str(CONFIG_DIR / 'agents.yaml')
    tasks_config = str(CONFIG_DIR / 'tasks.yaml')
    
    def __init__(self):
        super().__init__()
        logger.info("Initializing Vulnerability Crew")
        
        # Initialize tools
        self.detection_tools = self._setup_detection_tools()
        self.classification_tools = self._setup_classification_tools()
        self.planning_tools = self._setup_planning_tools()
        self.actuator_tools = self._setup_actuator_tools()
        
        logger.info(f"Tools initialized: {len(self.detection_tools) + len(self.classification_tools) + len(self.planning_tools) + len(self.actuator_tools)} total")
    
    def _setup_detection_tools(self) -> List:
        """Initialize detection tools for cybersecurity agent"""
        logger.debug("Setting up detection tools")
        return [
            NetworkAnomalyDetector()
        ]
    
    def _setup_classification_tools(self) -> List:
        """Initialize classification tools for EW agent"""
        logger.debug("Setting up classification tools")
        return [
            InputTypeDeterminerTool(),
            EWSignalProcessor(),
            ESMSensorSimulator(),
            ELINTSensorSimulator(),
            GNSSReceiverSimulator(),
            CommunicationReceiverSimulator(),
            JammingClassifier()
        ]
    
    def _setup_planning_tools(self) -> List:
        """Initialize planning tools for tactical and evaluator agents"""
        logger.debug("Setting up planning tools")
        return [
            CountermeasureSimulator()
        ]
    
    def _setup_actuator_tools(self) -> List:
        """Initialize actuator tools for execution agent"""
        logger.debug("Setting up actuator tools")
        return [
            ECMActuator(),
            FrequencyHopActuator(),
            PowerIncreaseActuator(),
            UAVActuator(),
            EvasiveManeuverActuator(),
            EMCONActuator(),
            AlternativeChannelActuator()
        ]
    
    @agent
    def cybersecurity_agent(self) -> Agent:
        """
        Agent to detect network-level anomalies indicating electronic attack.
        Analyzes network traffic for signs of jamming-induced degradation.
        """
        logger.debug("Creating Cybersecurity Agent")
        agent_config = dict(self.agents_config['cybersecurity_agent'])
        
        # Add detection tools
        if 'tools' not in agent_config:
            agent_config['tools'] = []
        agent_config['tools'].extend(self.detection_tools)
        
        return Agent(
            config=agent_config,
            verbose=True,
            allow_delegation=False
        )
    
    @agent
    def electronic_warfare_agent(self) -> Agent:
        """
        Agent to classify jamming sources and recommend countermeasures.
        Uses EW sensors and jamming database for classification.
        """
        logger.debug("Creating Electronic Warfare Agent")
        agent_config = dict(self.agents_config['electronic_warfare_agent'])
        
        # Add classification tools
        if 'tools' not in agent_config:
            agent_config['tools'] = []
        agent_config['tools'].extend(self.classification_tools)
        
        return Agent(
            config=agent_config,
            verbose=True,
            allow_delegation=False
        )
    
    @agent
    def tactical_planning_agent(self) -> Agent:
        """
        Agent to develop tactical countermeasure plans.
        Proposes 3 distinct approaches for human selection.
        """
        logger.debug("Creating Tactical Planning Agent")
        agent_config = dict(self.agents_config['tactical_planning_agent'])
        
        # Tactical agent needs planning tools and can delegate to evaluator
        if 'tools' not in agent_config:
            agent_config['tools'] = []
        agent_config['tools'].extend(self.planning_tools)
        
        return Agent(
            config=agent_config,
            verbose=True,
            allow_delegation=True  # Can delegate to evaluator
        )
    
    @agent
    def evaluator_agent(self) -> Agent:
        """
        Agent to evaluate and approve tactical plans.
        Uses simulation to validate plan viability.
        """
        logger.debug("Creating Evaluator Agent")
        agent_config = dict(self.agents_config['evaluator_agent'])
        
        # Evaluator needs simulation tools
        if 'tools' not in agent_config:
            agent_config['tools'] = []
        agent_config['tools'].extend(self.planning_tools)
        
        return Agent(
            config=agent_config,
            verbose=True,
            allow_delegation=False
        )
    
    @agent
    def actuator_agent(self) -> Agent:
        """
        Agent to execute selected countermeasure plan.
        Deploys all countermeasures and reports results.
        """
        logger.debug("Creating Actuator Agent")
        agent_config = dict(self.agents_config['actuator_agent'])
        
        # Add all actuator tools
        if 'tools' not in agent_config:
            agent_config['tools'] = []
        agent_config['tools'].extend(self.actuator_tools)
        
        return Agent(
            config=agent_config,
            verbose=True,
            allow_delegation=False
        )
    
    @task
    def network_anomaly_detection_task(self) -> Task:
        """Task to detect network anomalies"""
        logger.debug("Creating network anomaly detection task")
        return Task(
            config=self.tasks_config['network_anomaly_detection_task'],
            agent=self.cybersecurity_agent()
        )
    
    @task
    def jamming_classification_task(self) -> Task:
        """Task to classify jamming sources"""
        logger.debug("Creating jamming classification task")
        return Task(
            config=self.tasks_config['jamming_classification_task'],
            agent=self.electronic_warfare_agent(),
            context=[self.network_anomaly_detection_task()]
        )
    
    @task
    def tactical_planning_task(self) -> Task:
        """Task to develop countermeasure plans"""
        logger.debug("Creating tactical planning task")
        return Task(
            config=self.tasks_config['tactical_planning_task'],
            agent=self.tactical_planning_agent(),
            context=[
                self.network_anomaly_detection_task(),
                self.jamming_classification_task()
            ]
        )
    
    @task
    def plan_evaluation_task(self) -> Task:
        """Task to evaluate and approve plans"""
        logger.debug("Creating plan evaluation task")
        return Task(
            config=self.tasks_config['plan_evaluation_task'],
            agent=self.evaluator_agent(),
            context=[
                self.network_anomaly_detection_task(),
                self.jamming_classification_task(),
                self.tactical_planning_task()
            ]
        )
    
    @task
    def countermeasure_execution_task(self) -> Task:
        """Task to execute selected countermeasure plan"""
        logger.debug("Creating countermeasure execution task")
        return Task(
            config=self.tasks_config['countermeasure_execution_task'],
            agent=self.actuator_agent(),
            context=[
                self.network_anomaly_detection_task(),
                self.jamming_classification_task(),
                self.tactical_planning_task(),
                self.plan_evaluation_task()
            ]
        )
    
    @crew
    def crew(self) -> Crew:
        """Creates the Vulnerability Response Crew"""
        try:
            logger.info("Assembling Vulnerability Crew")
            
            crew_instance = Crew(
                agents=self.agents,
                tasks=self.tasks,
                process=Process.sequential,
                verbose=True,
                full_output=True,
                output_folder='output'
            )
            
            logger.info("✓ Vulnerability Crew assembled successfully")
            logger.info(f"  Agents: {len(self.agents)}")
            logger.info(f"  Tasks: {len(self.tasks)}")
            
            return crew_instance
            
        except Exception as e:
            logger.error(f"Failed to create crew: {e}", exc_info=True)
            raise RuntimeError(f"Cannot create crew: {e}")