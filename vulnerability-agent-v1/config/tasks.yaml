# NOTE: This file will be processed by Python code to inject HITL
# The HITL step will be handled programmatically in crew.py/main.py

network_anomaly_detection_task:
  description: >
    MISSION: Detect network-level anomalies indicating electronic warfare attack.
    
    ATTACK DATA PROVIDED:
    {attack_input}
    
    EXECUTION:
    1. Use Network Anomaly Detector tool to analyze the attack data
    2. Identify all network anomalies:
       - Packet loss percentage
       - Latency increases
       - Corrupted frames
       - Connection drops
       - Bandwidth degradation
    
    3. Assess severity level (CRITICAL/HIGH/MEDIUM/LOW) based on:
       - Packet loss at least 50%: CRITICAL
       - Packet loss at least 30%: HIGH
       - Packet loss at least 15%: MEDIUM
       - Packet loss less than 15%: LOW
    
    4. Identify affected ship systems and services
    
    5. Correlate network anomalies with potential RF jamming
    
    CRITICAL: If NO network anomalies detected, state this clearly but continue
    the workflow - the attack may be RF-only without immediate network impact.
  
  agent: cybersecurity_agent
  
  expected_output: >
    A network anomaly detection report formatted as follows:
    
    ===================================================================
    NETWORK ANOMALY DETECTION REPORT
    ===================================================================
    
    SEVERITY [CRITICAL/HIGH/MEDIUM/LOW/NONE]
    Detection Time [Timestamp]
    
    NETWORK METRICS
      - Packet Loss [X]%
      - Latency Increase [X] ms
      - Corrupted Frames [X]
      - Connection Drops [X]
      - Bandwidth Degradation [X]%
    
    AFFECTED SERVICES
      - [Service 1]
      - [Service 2]
    
    CORRELATION WITH RF JAMMING
    [Analysis of how network anomalies correlate with RF interference]
    
    ASSESSMENT
    [Brief assessment of network status and operational impact]
    
    ===================================================================
  
  output_file: output/network_anomaly_detection_task.md

jamming_classification_task:
  description: >
    MISSION: Identify and classify all jamming sources by type and recommend countermeasures.
    
    You have been provided attack data: {attack_input}
    You have been provided attack data and network anomaly analysis from previous task.
    
    EXECUTION:
    1. Use EW Signal Processor to analyze the attack data
    2. Use sensor simulators to gather additional intelligence:
       - ESM Sensor Simulator: Passive detection of hostile emissions
       - ELINT Sensor Simulator: Detailed technical characteristics
       - GNSS Receiver Simulator: Check navigation system impacts
       - Communication Receiver Simulator: Assess comm degradation
    
    3. Use Jamming Classifier to classify each jamming source:
       - Jamming type (barrage, spot, sweep, deceptive, pulse, noise, follower)
       - Threat level (CRITICAL/HIGH/MEDIUM/LOW)
       - Technical parameters (frequency, power, location)
       - Affected ship systems
       - Recommended countermeasures from database
    
    4. Assess overall threat level considering all sources
    
    5. Compile complete electronic warfare threat picture
  
  agent: electronic_warfare_agent
  
  context:
    - network_anomaly_detection_task
  
  expected_output: >
    A jamming classification report formatted as follows:
    
    ===================================================================
    JAMMING SOURCE CLASSIFICATION REPORT
    ===================================================================
    
    OVERALL THREAT [CRITICAL/HIGH/MEDIUM/LOW]
    Total Jamming Sources [N]
    Detection Time [Timestamp]
    
    SOURCE #1 CLASSIFICATION
    -------------------------------------------------------------------
      Source ID [ID]
      Jamming Type [Type]
      Threat Level [Level]
      
      Technical Parameters
        - Frequency [X] MHz
        - Power [X] dBm
        - Location [Lat, Lon]
        - Affected Systems [List]
      
      Recommended Countermeasures
        1. [Countermeasure 1] - [X]% effective
        2. [Countermeasure 2] - [X]% effective
        3. [Countermeasure 3] - [X]% effective
    
    [Repeat for each source]
    
    SUMMARY RECOMMENDATIONS
      [Priority countermeasure recommendations based on all sources]
    
    ===================================================================
  
  output_file: output/jamming_classification_task.md

tactical_planning_task:
  description: >
    MISSION: Develop THREE distinct countermeasure plans to neutralize the attack.
    
    INPUT: Network anomalies plus jamming classification from previous tasks
    
    EXECUTION:
    1. Review threat assessment:
       - Jamming sources, types, locations, affected systems
       - Network impact severity
       - Recommended countermeasures from database
    
    2. Generate 3 DISTINCT plans (NOT just parameter variations):
       
       Plan A - Aggressive Electronic Warfare
         Focus: ECM, power increase, frequency hopping
         Philosophy: Overwhelm or evade jamming electronically
       
       Plan B - Kinetic Neutralization
         Focus: UAV deployment, evasive maneuvers, EMCON
         Philosophy: Physically eliminate threat
       
       Plan C - Defensive Evasion
         Focus: EMCON, alternative channels, course changes
         Philosophy: Minimize signature, avoid engagement
    
    3. For EACH plan specify:
       - Plan ID and name
       - Ordered list of countermeasures with parameters
       - Estimated effectiveness (0-100%)
       - Execution time (seconds)
       - Pros (at least 3 advantages)
       - Cons (at least 3 disadvantages or risks)
       - Resource cost (LOW/MEDIUM/HIGH)
    
    4. ITERATE with Evaluator Agent:
       - Present 3 plans for simulation
       - If any rejected revise based on feedback
       - Continue until all 3 approved
    
    CRITICAL: Do NOT finalize until evaluator approves all plans.
  
  agent: tactical_planning_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
  
  expected_output: >
    Three approved countermeasure plans
    
    ===================================================================
    TACTICAL COUNTERMEASURE PLANS (EVALUATOR APPROVED)
    ===================================================================
    
    PLAN 1 [Name - Aggressive/Kinetic/Defensive]
    -------------------------------------------------------------------
    Plan ID PLAN-001
    
    Countermeasures (execution order)
      1. [Type] - Target [source/system] - Params [details]
      2. [Type] - Target [source/system] - Params [details]
    
    Effectiveness [X]% - Execution Time [X]s - Resource Cost [LEVEL]
    
    PROS
      - [Advantage 1]
      - [Advantage 2]
      - [Advantage 3]
    
    CONS
      - [Disadvantage 1]
      - [Disadvantage 2]
      - [Disadvantage 3]
    
    SIMULATION [X]% effective - [X]% success probability - APPROVED
    
    [Repeat for PLAN 2 and PLAN 3]
    
    ===================================================================
    STATUS All 3 plans viable - READY FOR HUMAN SELECTION
    ===================================================================
  
  output_file: output/tactical_planning_task.md

plan_evaluation_task:
  description: >
    MISSION: Validate tactical plans via simulation. Approve viable plans quickly.
    
    INPUT: 3 proposed plans from Tactical Planning Agent
    
    EXECUTION:
    1. For EACH plan:
       - Use Countermeasure Simulator tool
       - Extract effectiveness percent, success probability, resource cost, risks
    
    2. Apply APPROVAL CRITERIA (lenient - time-sensitive scenario):
       
       APPROVE if:
         • Effectiveness at least 40 percent
         • Addresses actual threat sources
         • Countermeasures match jamming type
         • Executable with resources
         • No obvious flaws
       
       REJECT if:
         • Effectiveness less than 30 percent
         • Ignores primary threats
         • Wrong countermeasures for threat
         • Impossible to execute
         • Clearly stupid
    
    3. ITERATIVE LOOP:
       - All 3 approved? Proceed to HITL
       - Any rejected? Provide specific feedback to Tactical Agent
       - Tactical revises and simulate again
       - Repeat until 3 viable plans
    
    SPEED: Do not over-optimize. Approve plans above 40 percent unless obviously broken.
  
  agent: evaluator_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
    - tactical_planning_task
  
  expected_output: >
    Evaluation report with approved plans
    
    ===================================================================
    PLAN EVALUATION REPORT
    ===================================================================
    
    Status COMPLETE - Approved 3 of 3 - Iterations [N]
    
    PLAN 1 EVALUATION
      Simulated Effectiveness [X] percent
      Success Probability [X] percent
      Resource Cost [LOW/MEDIUM/HIGH]
      Risk Level [LOW/MEDIUM/HIGH]
      Assessment APPROVED
      Reasoning [Why approved]
    
    PLAN 2 EVALUATION
      [Same format]
    
    PLAN 3 EVALUATION
      [Same format]
    
    ===================================================================
    FINAL All plans viable and ready for human selection
    ===================================================================
  
  output_file: output/plan_evaluation_task.md

# NOTE: HITL (Human In The Loop) happens BETWEEN plan_evaluation and execution
# This is handled programmatically in main.py, not as a CrewAI task
# The human selects 1 of 3 approved plans via:
#   - Gradio: Click button for Plan 1, 2, or 3
#   - CLI: Type 1, 2, or 3
# Selected plan is then passed to countermeasure_execution_task

countermeasure_execution_task:
  description: >
    MISSION: Execute the countermeasure plan selected by the commanding officer.
    
    The human operator has selected one of the three approved plans. Your job is to
    execute all countermeasures in that plan and report the results.
    
    EXECUTION:
    1. Parse selected plan from context:
       - Extract plan ID, name, countermeasures list
       - Note execution order
    
    2. For EACH countermeasure, select appropriate actuator tool:
       
       Countermeasure Type to Tool Mapping:
       - ecm uses ECM Actuator
       - frequency_hop uses Frequency Hop Actuator
       - power_increase uses Power Increase Actuator
       - uav_neutralization uses UAV Actuator
       - evasive_maneuver uses Evasive Maneuver Actuator
       - emcon uses EMCON Actuator
       - alternative_channel uses Alternative Channel Actuator
    
    3. Execute in sequence:
       - Log start time for each countermeasure
       - Call appropriate actuator tool with parameters
       - Capture result (SUCCESS or FAILURE, effectiveness percent)
       - Log completion
    
    4. Compile execution report:
       - List all executed countermeasures
       - Success or failure status for each
       - Overall effectiveness achieved
       - Systems restored
       - Remaining threats (if any)
    
    5. Final assessment:
       - Attack neutralized? (Yes or No)
       - Operational capability restored? (Yes or No)
       - Recommendations for follow-up actions
  
  agent: actuator_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
    - tactical_planning_task
    - plan_evaluation_task
  
  expected_output: >
    Countermeasure execution report
    
    ===================================================================
    COUNTERMEASURE EXECUTION REPORT
    ===================================================================
    
    Selected Plan [Plan name from context]
    Plan ID [Plan ID from context]
    Execution Start [Timestamp]
    
    EXECUTION LOG
    -------------------------------------------------------------------
    
    [1] Countermeasure [TYPE]
        Target [source or system]
        Time from T plus [start]s to T plus [end]s
        Result SUCCESS or FAILURE - Effectiveness [X] percent
        Details [Output from actuator tool]
    
    [2] Countermeasure [TYPE]
        Similar format
    
    [Continue for all countermeasures]
    
    ===================================================================
    EXECUTION SUMMARY
    ===================================================================
    
    Total Countermeasures [N]
    Successful [N] - Failed [N]
    Total Time [X] seconds
    Overall Effectiveness [X] percent
    
    THREAT STATUS
      - Source J-001 NEUTRALIZED
      - Source J-002 NEUTRALIZED
      - Source J-003 DEGRADED (if any remain)
    
    SYSTEMS RESTORED
      - Communications OPERATIONAL
      - Datalink OPERATIONAL
      - Navigation OPERATIONAL
      - Radar DEGRADED (if any issues)
    
    ===================================================================
    MISSION RESULT SUCCESS or PARTIAL or FAILURE
    ===================================================================
    
    Final Assessment
    [Brief summary of attack neutralization and current operational status]
  
  output_file: output/countermeasure_execution_task.md