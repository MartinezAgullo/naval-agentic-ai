# NOTE: This file will be processed by Python code to inject HITL
# The HITL step will be handled programmatically in crew.py/main.py

network_anomaly_detection_task:
  description: >
    MISSION: Detect network-level anomalies indicating electronic warfare attack.
    
    You have been provided attack data: {attack_input}
    
    EXECUTION:
    1. Use Network Anomaly Detector tool to analyze the attack data
    2. Identify all network anomalies:
       - Packet loss percentage
       - Latency increases
       - Corrupted frames
       - Connection drops
       - Bandwidth degradation
    
    3. Assess severity level (CRITICAL/HIGH/MEDIUM/LOW) based on:
       - Packet loss >= 50%: CRITICAL
       - Packet loss >= 30%: HIGH
       - Packet loss >= 15%: MEDIUM
       - Packet loss < 15%: LOW
    
    4. Identify affected ship systems and services
    
    5. Correlate network anomalies with potential RF jamming
    
    CRITICAL: If NO network anomalies detected, state this clearly but continue
    the workflow - the attack may be RF-only without immediate network impact.
  
  agent: cybersecurity_agent
  
  expected_output: >
    A network anomaly detection report formatted as follows:
    
    ===================================================================
    NETWORK ANOMALY DETECTION REPORT
    ===================================================================
    
    SEVERITY: [CRITICAL/HIGH/MEDIUM/LOW/NONE]
    Detection Time: [Timestamp]
    
    NETWORK METRICS:
      • Packet Loss: [X]%
      • Latency Increase: +[X] ms
      • Corrupted Frames: [X]
      • Connection Drops: [X]
      • Bandwidth Degradation: [X]%
    
    AFFECTED SERVICES:
      • [Service 1]
      • [Service 2]
      ...
    
    CORRELATION WITH RF JAMMING:
    [Analysis of how network anomalies correlate with RF interference]
    
    ASSESSMENT:
    [Brief assessment of network status and operational impact]
    
    ===================================================================
  
  output_file: output/network_anomaly_detection_task.md

jamming_classification_task:
  description: >
    MISSION: Identify and classify all jamming sources by type and recommend countermeasures.
    
    You have been provided attack data: {attack_input}
    You have network anomaly analysis from previous task.
    
    EXECUTION:
    1. Use EW Signal Processor to analyze the attack data
    2. Use sensor simulators to gather additional intelligence:
       - ESM Sensor Simulator: Passive detection of hostile emissions
       - ELINT Sensor Simulator: Detailed technical characteristics
       - GNSS Receiver Simulator: Check navigation system impacts
       - Communication Receiver Simulator: Assess comm degradation
    
    3. Use Jamming Classifier to classify each jamming source:
       - Jamming type (barrage, spot, sweep, deceptive, pulse, noise, follower)
       - Threat level (CRITICAL/HIGH/MEDIUM/LOW)
       - Technical parameters (frequency, power, location)
       - Affected ship systems
       - Recommended countermeasures from database
    
    4. Assess overall threat level considering all sources
    
    5. Compile complete electronic warfare threat picture
  
  agent: electronic_warfare_agent
  
  context:
    - network_anomaly_detection_task
  
  expected_output: >
    A jamming classification report formatted as follows:
    
    ===================================================================
    JAMMING SOURCE CLASSIFICATION REPORT
    ===================================================================
    
    OVERALL THREAT: [CRITICAL/HIGH/MEDIUM/LOW]
    Total Jamming Sources: [N]
    Detection Time: [Timestamp]
    
    SOURCE #1 CLASSIFICATION:
    -------------------------------------------------------------------
      Source ID: [ID]
      Jamming Type: [Type]
      Threat Level: [Level]
      
      Technical Parameters:
        • Frequency: [X] MHz
        • Power: [X] dBm
        • Location: [Lat, Lon]
        • Affected Systems: [List]
      
      Recommended Countermeasures:
        1. [Countermeasure 1] - [X]% effective
        2. [Countermeasure 2] - [X]% effective
        3. [Countermeasure 3] - [X]% effective
    
    [Repeat for each source]
    
    SUMMARY RECOMMENDATIONS:
      → [Priority countermeasure recommendations based on all sources]
    
    ===================================================================
  
  output_file: output/jamming_classification_task.md

tactical_planning_task:
  description: >
    MISSION: Develop THREE distinct countermeasure plans to neutralize the attack.
    
    You have network anomaly analysis and jamming classification from previous tasks.
    
    EXECUTION:
    1. Review the threat assessment:
       - Jamming sources, types, and threat levels
       - Network impact and affected systems
       - Recommended countermeasures from database
    
    2. Develop THREE DISTINCT countermeasure plans:
       - Each plan must use DIFFERENT tactical approaches
       - Not just variations in power/timing - fundamentally different strategies
       - Examples of distinct approaches:
         * Aggressive Electronic: ECM + Power Increase + Frequency Hop
         * Kinetic Neutralization: UAV + Evasive Maneuver + EMCON
         * Defensive Evasion: EMCON + Alternative Channels + Maneuvers
    
    3. For EACH plan, specify:
       - Plan ID and descriptive name
       - List of countermeasures in execution order
       - Estimated overall effectiveness (0-100%)
       - Estimated execution time
       - Pros (advantages of this approach)
       - Cons (disadvantages and risks)
       - Resource requirements
    
    4. IMPORTANT: Present your 3 plans to the Evaluator Agent
       - The evaluator will simulate each plan
       - If evaluator rejects any plan, you must revise it
       - Continue iterating until evaluator approves all 3 plans
       - DO NOT finalize plans without evaluator approval
    
    PLAN DIVERSITY REQUIREMENTS:
    - Plan 1: Aggressive/offensive approach
    - Plan 2: Balanced approach (mix of electronic and physical)
    - Plan 3: Defensive/evasive approach
    
    Each plan must be executable and address the actual threat.
  
  agent: tactical_planning_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
  
  expected_output: >
    Three approved countermeasure plans formatted as follows:
    
    ===================================================================
    TACTICAL COUNTERMEASURE PLANS (APPROVED)
    ===================================================================
    
    Plans have been evaluated and approved by validation officer.
    All plans are viable and ready for human selection.
    
    -------------------------------------------------------------------
    PLAN 1: [Descriptive Name]
    -------------------------------------------------------------------
    Plan ID: PLAN-001
    Tactical Approach: [Aggressive/Balanced/Defensive]
    
    Countermeasures (in execution order):
      1. [Countermeasure Type]
         Target: [Source ID or System]
         Parameters: [Specific parameters]
      
      2. [Countermeasure Type]
         Target: [Source ID or System]
         Parameters: [Specific parameters]
      
      [Continue for all countermeasures]
    
    Estimated Effectiveness: [X]%
    Total Execution Time: [X] seconds
    Resource Cost: [LOW/MEDIUM/HIGH]
    Risk Level: [LOW/MEDIUM/HIGH]
    
    PROS:
      ✓ [Advantage 1]
      ✓ [Advantage 2]
      ✓ [Advantage 3]
    
    CONS:
      ✗ [Disadvantage 1]
      ✗ [Disadvantage 2]
      ✗ [Disadvantage 3]
    
    SIMULATION RESULTS:
      Simulated Effectiveness: [X]%
      Success Probability: [X]%
      Evaluator Assessment: APPROVED
    
    -------------------------------------------------------------------
    PLAN 2: [Descriptive Name]
    -------------------------------------------------------------------
    [Same format as Plan 1]
    
    -------------------------------------------------------------------
    PLAN 3: [Descriptive Name]
    -------------------------------------------------------------------
    [Same format as Plan 1]
    
    ===================================================================
    SELECTION REQUIRED: Human operator must choose one plan
    ===================================================================
  
  output_file: output/tactical_planning_task.md

plan_evaluation_task:
  description: >
    MISSION: Evaluate tactical plans using simulation and approve viable plans.
    
    You receive 3 proposed plans from the Tactical Planning Agent.
    
    EXECUTION:
    1. For EACH proposed plan:
       - Use Countermeasure Simulator tool to simulate the plan
       - Review simulated effectiveness (target: >40%)
       - Check if plan is logically sound for the threat
       - Assess resource requirements and risk level
    
    2. Apply APPROVAL CRITERIA (be lenient, this is time-sensitive):
       APPROVE if:
         • Simulated effectiveness >= 40%
         • Plan addresses the actual jamming sources
         • Countermeasures are appropriate for jamming type
         • Plan is executable with available resources
         • No obviously stupid elements
       
       REJECT if:
         • Simulated effectiveness < 30%
         • Plan ignores primary threats
         • Countermeasures don't match threat (e.g., EMCON for critical comms)
         • Plan requires unavailable resources
         • Contains clearly flawed logic
    
    3. ITERATIVE PROCESS:
       - If all 3 plans APPROVED: Proceed to present them for human selection
       - If any plan REJECTED: Provide feedback to Tactical Agent
       - Tactical Agent will revise the rejected plan(s)
       - Simulate revised plans
       - Continue until 3 viable plans are approved
    
    4. Once 3 plans approved, compile them for human selection
    
    CRITICAL: Work QUICKLY. Don't be a perfectionist. Plans don't need to be
    optimal, just viable. The human will make the final choice. Your job is to
    catch obviously bad plans, not to optimize.
  
  agent: evaluator_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
    - tactical_planning_task
  
  expected_output: >
    An evaluation report with approved plans:
    
    ===================================================================
    PLAN EVALUATION REPORT
    ===================================================================
    
    EVALUATION STATUS: COMPLETE
    Plans Approved: 3/3
    Iterations Required: [N]
    
    PLAN 1 EVALUATION:
    -------------------------------------------------------------------
    Plan ID: PLAN-001
    Plan Name: [Name]
    
    Simulation Results:
      • Simulated Effectiveness: [X]%
      • Success Probability: [X]%
      • Execution Time: [X] seconds
      • Resource Cost: [LOW/MEDIUM/HIGH]
      • Risk Level: [LOW/MEDIUM/HIGH]
    
    Assessment: [APPROVED/REJECTED]
    Reasoning: [Why approved or rejected]
    
    PLAN 2 EVALUATION:
    [Same format]
    
    PLAN 3 EVALUATION:
    [Same format]
    
    ===================================================================
    FINAL STATUS: All plans viable and ready for human selection
    ===================================================================
  
  output_file: output/plan_evaluation_task.md

# NOTE: HITL (Human In The Loop) happens HERE
# This is NOT a CrewAI task - it's handled in main.py
# The human will be presented with 3 approved plans and must select one
# Selection happens via:
#   - Gradio: User clicks button for Plan 1, 2, or 3
#   - CLI: User types 1, 2, or 3
# The selected plan is then passed to the actuator_agent

countermeasure_execution_task:
  description: >
    MISSION: Execute the countermeasure plan selected by human operator.
    
    The commanding officer has selected: {selected_plan}
    
    EXECUTION:
    1. Parse the selected plan to extract all countermeasures
    
    2. For EACH countermeasure in the plan, use the appropriate actuator tool:
       - ECM → Use ECM Actuator
       - Frequency Hopping → Use Frequency Hop Actuator
       - Power Increase → Use Power Increase Actuator
       - UAV Neutralization → Use UAV Actuator
       - Evasive Maneuver → Use Evasive Maneuver Actuator
       - EMCON → Use EMCON Actuator
       - Alternative Channel → Use Alternative Channel Actuator
    
    3. Execute countermeasures in the order specified in the plan
    
    4. For each countermeasure execution:
       - Log execution start time
       - Execute using appropriate tool
       - Capture execution result (success/failure)
       - Log execution completion
    
    5. Compile comprehensive execution report:
       - Which countermeasures were executed
       - Success/failure status for each
       - Overall effectiveness achieved
       - Remaining threats (if any)
       - System status after execution
    
    6. Provide final assessment of attack neutralization
  
  agent: actuator_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
    - tactical_planning_task
    - plan_evaluation_task
  
  expected_output: >
    A countermeasure execution report formatted as follows:
    
    ===================================================================
    COUNTERMEASURE EXECUTION REPORT
    ===================================================================
    
    SELECTED PLAN: {selected_plan_name}
    Plan ID: {selected_plan_id}
    Execution Start: [Timestamp]
    
    COUNTERMEASURE EXECUTION LOG:
    -------------------------------------------------------------------
    
    Countermeasure #1: [Type]
    Target: [Source/System]
    Execution Time: T+[X]s to T+[Y]s
    Result: [SUCCESS/FAILURE]
    Effectiveness: [X]%
    Details:
      [Execution details from actuator tool]
    
    Countermeasure #2: [Type]
    [Same format]
    
    [Continue for all countermeasures]
    
    ===================================================================
    EXECUTION SUMMARY
    ===================================================================
    
    Total Countermeasures: [N]
    Successful: [N]
    Failed: [N]
    Total Execution Time: [X] seconds
    
    OVERALL EFFECTIVENESS: [X]%
    
    THREAT STATUS:
      ✓ [Neutralized threat 1]
      ✓ [Neutralized threat 2]
      ⚠ [Remaining threat] (if any)
    
    SYSTEMS RESTORED:
      ✓ [System 1]
      ✓ [System 2]
    
    OPERATIONAL STATUS:
      Communications: [Status]
      Radar: [Status]
      Datalink: [Status]
      Navigation: [Status]
    
    ===================================================================
    MISSION RESULT: [SUCCESS/PARTIAL SUCCESS/FAILURE]
    ===================================================================
    
    FINAL ASSESSMENT:
    [Brief assessment of attack neutralization and current operational capability]
  
  output_file: output/countermeasure_execution_task.md