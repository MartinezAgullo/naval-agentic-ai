# NOTE: This file will be processed by Python code to inject HITL
# The HITL step will be handled programmatically in crew.py/main.py

network_anomaly_detection_task:
  description: >
    MISSION: Detect network-level anomalies indicating electronic warfare attack.
    
    ATTACK DATA PROVIDED:
    {attack_input}
    
    EXECUTION:
    1. Use Network Anomaly Detector tool to analyze the attack data
    2. Identify all network anomalies:
       - Packet loss percentage
       - Latency increases
       - Corrupted frames
       - Connection drops
       - Bandwidth degradation
    
    3. Assess severity level (CRITICAL/HIGH/MEDIUM/LOW) based on:
       - Packet loss ≥ 50%: CRITICAL
       - Packet loss ≥ 30%: HIGH
       - Packet loss ≥ 15%: MEDIUM
       - Packet loss < 15%: LOW
    
    4. Identify affected ship systems and services
    
    5. Correlate network anomalies with potential RF jamming
    
    CRITICAL: Complete analysis in ONE execution. Do NOT iterate.
  
  agent: cybersecurity_agent
  
  expected_output: >
    A network anomaly detection report formatted as follows:
    
    ===================================================================
    NETWORK ANOMALY DETECTION REPORT
    ===================================================================
    
    SEVERITY: [CRITICAL/HIGH/MEDIUM/LOW/NONE]
    Detection Time: [Timestamp]
    
    NETWORK METRICS:
      - Packet Loss: [X]%
      - Latency Increase: [X] ms
      - Corrupted Frames: [X]
      - Connection Drops: [X]
      - Bandwidth Degradation: [X]%
    
    AFFECTED SERVICES:
      - [Service 1]
      - [Service 2]
    
    CORRELATION WITH RF JAMMING:
    [Analysis of how network anomalies correlate with RF interference]
    
    ASSESSMENT:
    [Brief assessment of network status and operational impact]
    
    ===================================================================
  
  output_file: output/network_anomaly_detection_task.md

jamming_classification_task:
  description: >
    MISSION: Identify and classify all jamming sources by type and recommend countermeasures.
    
    You have been provided attack data: {attack_input}
    You have network anomaly analysis from the previous task in your context.
    
    EXECUTION:
    1. Use EW Signal Processor to analyze the attack data
    2. Use sensor simulators to gather intelligence:
       - ESM Sensor Simulator: Passive detection of hostile emissions
       - ELINT Sensor Simulator: Detailed technical characteristics
       - GNSS Receiver Simulator: Check navigation system impacts
       - Communication Receiver Simulator: Assess comm degradation
    
    3. Use Jamming Classifier to classify each jamming source:
       - Jamming type (barrage, spot, sweep, deceptive, pulse, noise, follower)
       - Threat level (CRITICAL/HIGH/MEDIUM/LOW)
       - Technical parameters (frequency, power, location)
       - Affected ship systems
       - Recommended countermeasures from database
    
    4. Assess overall threat level considering all sources
    
    5. Compile complete electronic warfare threat picture
    
    CRITICAL: Complete classification in ONE execution. Do NOT iterate.
  
  agent: electronic_warfare_agent
  
  context:
    - network_anomaly_detection_task
  
  expected_output: >
    A jamming classification report formatted as follows:
    
    ===================================================================
    JAMMING SOURCE CLASSIFICATION REPORT
    ===================================================================
    
    OVERALL THREAT: [CRITICAL/HIGH/MEDIUM/LOW]
    Total Jamming Sources: [N]
    Detection Time: [Timestamp]
    
    SOURCE #1 CLASSIFICATION
    -------------------------------------------------------------------
      Source ID: [ID]
      Jamming Type: [Type]
      Threat Level: [Level]
      
      Technical Parameters:
        - Frequency: [X] MHz
        - Power: [X] dBm
        - Location: [Lat, Lon]
        - Affected Systems: [List]
      
      Recommended Countermeasures:
        1. [Countermeasure 1] - [X]% effective
        2. [Countermeasure 2] - [X]% effective
        3. [Countermeasure 3] - [X]% effective
    
    [Repeat for each source]
    
    SUMMARY RECOMMENDATIONS:
      [Priority countermeasure recommendations based on all sources]
    
    ===================================================================
  
  output_file: output/jamming_classification_task.md

tactical_planning_task:
  description: >
    MISSION: Generate EXACTLY THREE distinct countermeasure plans in ONE execution.
    
    INPUT: Network anomalies and jamming classification from previous tasks (available in context)
    
    EXECUTION:
    1. Review threat assessment from context:
       - Jamming sources, types, locations, affected systems
       - Network impact severity
       - Recommended countermeasures from database
    
    2. Generate 3 DISTINCT plans (NOT just parameter variations):
       
       Plan A - Aggressive Electronic Warfare
         Focus: ECM, power increase, frequency hopping
         Philosophy: Overwhelm or evade jamming electronically
       
       Plan B - Kinetic Neutralization
         Focus: UAV deployment, evasive maneuvers
         Philosophy: Physically eliminate threat source
       
       Plan C - Defensive Evasion
         Focus: EMCON, alternative channels, course changes
         Philosophy: Minimize signature, avoid engagement
    
    3. For EACH plan specify:
       - Plan ID (PLAN-001, PLAN-002, PLAN-003)
       - Plan name and tactical approach
       - Ordered list of countermeasures with parameters
       - Target jamming sources for each countermeasure
       - Estimated effectiveness (0-100%)
       - Execution time (seconds)
       - Resource cost (LOW/MEDIUM/HIGH)
       - PROS: At least 3 advantages
       - CONS: At least 3 disadvantages or risks
    
    4. Output all 3 plans in structured format (JSON or markdown table)
    
    CRITICAL INSTRUCTIONS:
    - Generate ALL 3 plans in ONE response
    - Do NOT wait for feedback from evaluator
    - Do NOT iterate or revise
    - Do NOT ask questions to other agents
    - Accept that plans may be imperfect (evaluator will validate)
    - Prioritize SPEED over perfection
  
  agent: tactical_planning_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
  
  expected_output: >
    Three complete countermeasure plans in structured format:
    
    ===================================================================
    TACTICAL COUNTERMEASURE PLANS
    ===================================================================
    
    PLAN A: [Name - Aggressive Electronic Warfare]
    -------------------------------------------------------------------
    Plan ID: PLAN-001
    
    Countermeasures (execution order):
      1. [Type] - Target: [source] - Params: [details] - Est. Effectiveness: [X]%
      2. [Type] - Target: [source] - Params: [details] - Est. Effectiveness: [X]%
      [Continue for all countermeasures]
    
    Overall Effectiveness: [X]%
    Execution Time: [X] seconds
    Resource Cost: [LOW/MEDIUM/HIGH]
    
    PROS:
      - [Advantage 1]
      - [Advantage 2]
      - [Advantage 3]
    
    CONS:
      - [Disadvantage 1]
      - [Disadvantage 2]
      - [Disadvantage 3]
    
    -------------------------------------------------------------------
    
    PLAN B: [Name - Kinetic Neutralization]
    [Same format as Plan A]
    
    -------------------------------------------------------------------
    
    PLAN C: [Name - Defensive Evasion]
    [Same format as Plan A]
    
    ===================================================================
    STATUS: 3 plans generated - READY FOR EVALUATION
    ===================================================================
  
  output_file: output/tactical_planning_task.md

plan_evaluation_task:
  description: >
    MISSION: Evaluate the 3 tactical plans by simulating each one. Complete in ONE pass.
    
    INPUT: 3 proposed plans from Tactical Planning Agent (available in context)
    
    EXECUTION:
    1. Read the 3 plans from context (tactical_planning_task output)
    
    2. Simulate EACH plan using Countermeasure Simulator tool:
       - Call simulator for Plan A (PLAN-001)
       - Call simulator for Plan B (PLAN-002)
       - Call simulator for Plan C (PLAN-003)
       - Total: EXACTLY 3 tool calls
    
    3. Apply APPROVAL CRITERIA (lenient - time-sensitive scenario):
       
       APPROVE if:
         • Effectiveness ≥ 40%
         • Addresses actual threat sources
         • Countermeasures match jamming type
         • Executable with resources
       
       MARK AS RISKY (but still approve) if:
         • Effectiveness 30-40%
         • Minor mismatches in countermeasure selection
         • High resource cost
       
       REJECT only if:
         • Effectiveness < 30%
         • Ignores all primary threats
         • Physically impossible to execute
    
    4. Compile evaluation report with:
       - Simulation effectiveness for each plan
       - Success probability
       - Resource requirements
       - Risk assessment
       - APPROVED or RISKY status for each plan
    
    CRITICAL INSTRUCTIONS:
    - Complete evaluation in ONE execution
    - Call Countermeasure Simulator EXACTLY 3 times (once per plan)
    - Do NOT iterate with Tactical Planning Agent
    - Do NOT ask questions to other agents
    - Do NOT request plan revisions
    - APPROVE marginal plans (40%+) rather than rejecting
    - Flag risks but accept imperfect plans
    - Speed is critical in combat scenarios
  
  agent: evaluator_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
    - tactical_planning_task
  
  expected_output: >
    Evaluation report with all 3 plans assessed:
    
    ===================================================================
    PLAN EVALUATION REPORT
    ===================================================================
    
    Status: COMPLETE - 3 plans evaluated
    Simulation Tool Calls: 3
    
    PLAN A EVALUATION (PLAN-001)
    -------------------------------------------------------------------
      Simulated Effectiveness: [X]%
      Success Probability: [X]%
      Resource Cost: [LOW/MEDIUM/HIGH]
      Risk Level: [LOW/MEDIUM/HIGH]
      Status: APPROVED / RISKY / REJECTED
      
      Reasoning:
      [Brief explanation of approval/rejection decision]
      
      Risks/Concerns:
      [Any identified risks or concerns]
    
    PLAN B EVALUATION (PLAN-002)
    [Same format as Plan A]
    
    PLAN C EVALUATION (PLAN-003)
    [Same format as Plan A]
    
    ===================================================================
    SUMMARY
    ===================================================================
    
    Approved Plans: [N] of 3
    Ready for Human Selection: [YES/NO]
    
    Recommendation:
    [Brief recommendation on which plan(s) are preferred, if any]
    
    ===================================================================
    NEXT STEP: Human operator selects 1 of 3 plans for execution
    ===================================================================
  
  output_file: output/plan_evaluation_task.md

# NOTE: HITL (Human In The Loop) happens BETWEEN plan_evaluation and execution
# This is handled programmatically in main.py, not as a CrewAI task
# The human selects 1 of 3 approved plans via:
#   - Gradio: Click button for Plan 1, 2, or 3
#   - CLI: Type 1, 2, or 3
# Selected plan is then passed to countermeasure_execution_task

countermeasure_execution_task:
  description: >
    MISSION: Execute the countermeasure plan selected by the commanding officer.
    
    The human operator has selected one of the three approved plans. Your job is to
    execute all countermeasures in that plan and report the results.
    
    EXECUTION:
    1. Parse selected plan from context:
       - Extract plan ID, name, countermeasures list
       - Note execution order and parameters
    
    2. For EACH countermeasure, select appropriate actuator tool:
       
       Countermeasure Type → Tool Mapping:
       - ecm → ECM Actuator
       - frequency_hop → Frequency Hop Actuator
       - power_increase → Power Increase Actuator
       - uav_neutralization → UAV Actuator
       - evasive_maneuver → Evasive Maneuver Actuator
       - emcon → EMCON Actuator
       - alternative_channel → Alternative Channel Actuator
    
    3. Execute countermeasures in sequence:
       - Log start time for each countermeasure
       - Call appropriate actuator tool with parameters
       - Capture result (SUCCESS/FAILURE, effectiveness %)
       - Log completion time
    
    4. Compile execution report:
       - List all executed countermeasures with status
       - Success/failure for each
       - Overall effectiveness achieved
       - Systems restored
       - Remaining threats (if any)
    
    5. Final assessment:
       - Attack neutralized? (YES/NO)
       - Operational capability restored? (YES/NO)
       - Recommendations for follow-up actions
    
    CRITICAL: Execute all countermeasures in ONE pass. Do NOT iterate.
  
  agent: actuator_agent
  
  context:
    - network_anomaly_detection_task
    - jamming_classification_task
    - tactical_planning_task
    - plan_evaluation_task
  
  expected_output: >
    Countermeasure execution report:
    
    ===================================================================
    COUNTERMEASURE EXECUTION REPORT
    ===================================================================
    
    Selected Plan: [Plan name]
    Plan ID: [Plan ID]
    Execution Start: [Timestamp]
    
    EXECUTION LOG
    -------------------------------------------------------------------
    
    [1] Countermeasure: [TYPE]
        Target: [source/system]
        Time: T+[start]s to T+[end]s
        Result: SUCCESS / FAILURE
        Effectiveness: [X]%
        Details: [Output from actuator tool]
    
    [2] Countermeasure: [TYPE]
        [Same format]
    
    [Continue for all countermeasures]
    
    ===================================================================
    EXECUTION SUMMARY
    ===================================================================
    
    Total Countermeasures: [N]
    Successful: [N]
    Failed: [N]
    Total Time: [X] seconds
    Overall Effectiveness: [X]%
    
    THREAT STATUS:
      - Source J-001: NEUTRALIZED / DEGRADED / ACTIVE
      - Source J-002: NEUTRALIZED / DEGRADED / ACTIVE
      [Continue for all sources]
    
    SYSTEMS RESTORED:
      - Communications: OPERATIONAL / DEGRADED / DOWN
      - Datalink: OPERATIONAL / DEGRADED / DOWN
      - Navigation: OPERATIONAL / DEGRADED / DOWN
      - Radar: OPERATIONAL / DEGRADED / DOWN
    
    ===================================================================
    MISSION RESULT: SUCCESS / PARTIAL / FAILURE
    ===================================================================
    
    Final Assessment:
    [Brief summary of attack neutralization and current operational status]
    
    Recommendations:
    [Any follow-up actions needed]
  
  output_file: output/countermeasure_execution_task.md